const express = require("express");
const router = express.Router();
//feth from middleware
const fetchuser = require("../middleware/Fetchuser");

//get Notes Model
const Notes = require("../models/Notes");

//imp express validator for validation
const { body, validationResult } = require("express-validator");

//ROUte1: get All the notes  using  : GET "/api/notes/getuser" . login reqiured
router.get("/fetchallnotes", fetchuser, async (req, res) => {
  try {
    //here we find the notes using user id generated by tokens
    const notes = await Notes.find({ user: req.user.id });
    res.json(notes);
  } catch (error) {
    console.error(error.message);
    res.status(500).send("Internal Server Error");
  }
});

//ROUte2: Adding Notes using  : POST "/api/notes/addnote" . login reqiured
router.post(
  "/addnote",
  fetchuser,
  [
    body("title", "enter valid title").isLength({ min: 3 }),
    body("discription", "discription at least 5 charactres").isLength({
      min: 5,
    }),
  ],
  async (req, res) => {
    try {
      //destructuring /gets the value from notes
      const { title, discription, tag } = req.body;

      // if error presents return bad request and the errors get this from expressvalidator
      const errors = validationResult(req);

      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      const note = new Notes({
        title,
        discription,
        tag,
        user: req.user.id,
      });

      const Savenote = await note.save();

      res.json(Savenote);
    } catch (error) {
      console.error(error.message);
      res.status(500).send("Internal Server Error");
    }
  }
);

//ROUte3: Update Notes using  : PuT "/api/notes/updatenote" . login reqiured

router.put("/updatenotes/:id", fetchuser, async (req, res) => {
  try {
    //destructuring /gets the value from notes
    const { title, discription, tag } = req.body;

    //create a newNotes object
    const newNotes = {};

    if (title) {
      newNotes.title = title;
    }

    if (discription) {
      newNotes.discription = discription;
    }

    if (tag) {
      newNotes.tag = tag;
    }

    //find the note to be update And update it
    let notes = await Notes.findById(req.params.id);

    if (!notes) {
      return res.status(404).send("Not Found");
    }

    if (notes.user.toString() !== req.user.id) {
      return res.status(401).send("Not Allowed");
    }

    notes = await Notes.findByIdAndUpdate(
      req.params.id,
      { $set: newNotes },
      { new: true }
    );
    res.json({ notes });
  } catch (error) {
    console.error(error.message);
    res.status(500).send("Internal Server Error");
  }
});

//ROUte4: Delete Notes using  : delete "/api/notes/deletenotes" . login reqiured

router.delete("/deletenotes/:id", fetchuser, async (req, res) => {
  try {
    //destructuring /gets the value from notes
    const { title, discription, tag } = req.body;

    //find the note to be delete And deleted  it
    let notes = await Notes.findById(req.params.id);

    if (!notes) {
      return res.status(404).send("Not Found");
    }

    //Allow deletion only if user his owns notes
    if (notes.user.toString() !== req.user.id) {
      return res.status(401).send("Not Allowed");
    }

    notes = await Notes.findOneAndDelete(req.params.id);

    res.json({ Sucess: "Note Deleted Successfully", notes: notes });
  } catch (error) {
    console.error(error.message);
    res.status(500).send("Internal Server Error");
  }
});

module.exports = router;
